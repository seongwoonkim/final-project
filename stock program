import pandas as pd
from pandas import DataFrame

import matplotlib
import matplotlib.pyplot as plt
import matplotlib.font_manager as font_manager
import seaborn as sns

def trade_stocks(self):
    hoga_lookup = {'지정가': "00", '시장가': "03"}

    f = open("buy_list.txt", 'rt')
    buy_list = f.readlines()
    f.close()

    f = open("sell_list.txt", 'rt')
    sell_list = f.readlines()
    f.close()
#주문할 때 필요한 계좌 정보

account = self.comboBox.currentText()
#거래구분, 종목코드, 수량, 가격.
# 주문을 수행.

# 매수 리스트
for row_data in buy_list:
    split_row_data = row_data.split(';')
    hoga = split_row_data[2]
    code = split_row_data[1]
    num = split_row_data[3]
    price = split_row_data[4]

    if split_row_data[-1].rstrip() == '매수전':
        self.kiwoom.send_order("send_order_req", "0101", account, 1, code, num, price, hoga_lookup[hoga], "")


# 매매 리스트
for row_data in sell_list:
    split_row_data = row_data.split(';')
    hoga = split_row_data[2]
    code = split_row_data[1]
    num = split_row_data[3]
    price = split_row_data[4]

    if split_row_data[-1].rstrip() == '매도전':
        self.kiwoom.send_order("send_order_req", "0101", account, 2, code, num, price, hoga_lookup[hoga], "")
#주문 여부 업데이트

# buy list
for i, row_data in enumerate(buy_list):
     buy_list[i] = buy_list[i].replace("매수전", "주문완료")

# file update
f = open("buy_list.txt", 'wt')
for row_data in buy_list:
    f.write(row_data)
f.close()

# sell list
for i, row_data in enumerate(sell_list):
     sell_list[i] = sell_list[i].replace("매도전", "주문완료")

# file update
f = open("sell_list.txt", 'wt')
for row_data in sell_list:
    f.write(row_data)
f.close()

def trade_stocks(self):
    hoga_lookup = {'지정가': "00", '시장가': "03"}

    f = open("buy_list.txt", 'rt')
    buy_list = f.readlines()
    f.close()

    f = open("sell_list.txt", 'rt')
    sell_list = f.readlines()
    f.close()

    # account
    account = self.comboBox.currentText()

    # buy list
    for row_data in buy_list:
        split_row_data = row_data.split(';')
        hoga = split_row_data[2]
        code = split_row_data[1]
        num = split_row_data[3]
        price = split_row_data[4]

        if split_row_data[-1].rstrip() == '매수전':
            self.kiwoom.send_order("send_order_req", "0101", account, 1, code, num, price,
hoga_lookup[hoga], "")

    # sell list
    for row_data in sell_list:
        split_row_data = row_data.split(';')
        hoga = split_row_data[2]
        code = split_row_data[1]
        num = split_row_data[3]
        price = split_row_data[4]

        if split_row_data[-1].rstrip() == '매도전':
            self.kiwoom.send_order("send_order_req", "0101", account, 2, code, num, price,
hoga_lookup[hoga], "")

    # buy list
    for i, row_data in enumerate(buy_list):
        buy_list[i] = buy_list[i].replace("매수전", "주문완료")

    # file update
    f = open("buy_list.txt", 'wt')
    for row_data in buy_list:
        f.write(row_data)
    f.close()

    # sell list
    for i, row_data in enumerate(sell_list):
        sell_list[i] = sell_list[i].replace("매도전", "주문완료")

    # file update
    f = open("sell_list.txt", 'wt')
    for row_data in sell_list:
        f.write(row_data)
    f.close()
#매서드  호출

def timeout(self):
    market_start_time = QTime(9, 0, 0)
    current_time = QTime.currentTime()

    if current_time > market_start_time and self.trade_stocks_done is False:
        self.trade_stocks()
        self.trade_stocks_done = True

    text_time = current_time.toString("hh:mm:ss")
    time_msg = "현재시간: " + text_time

    state = self.kiwoom.get_connect_state()
    if state == 1:
        state_msg = "서버 연결 중"
    else:
        state_msg = "서버 미 연결 중"

    self.statusbar.showMessage(state_msg + " | " + time_msg)

class MyWindow(QMainWindow, form_class):
    def __init__(self):
        super().__init__()
        self.setupUi(self)

        self.trade_stocks_done = False

class MyWindow(QMainWindow, form_class):
     def __init__(self):
        super().__init__()
        self.setupUi(self)

         # 중간 코드 생략
        self.load_buy_sell_list()

    def load_buy_sell_list(self):
    f = open("buy_list.txt", 'rt')
    buy_list = f.readlines()
    f.close()

    f = open("sell_list.txt", 'rt')
    sell_list = f.readlines()
    f.close()

    # buy list
    for j in range(len(buy_list)):
        row_data = buy_list[j]
        split_row_data = row_data.split(';')
        split_row_data[1] = self.kiwoom.get_master_code_name(split_row_data[1].rsplit())

    for i in range(len(split_row_data)):
        item = QTableWidgetItem(split_row_data[i].rstrip())
        item.setTextAlignment(Qt.AlignVCenter | Qt.AlignCenter)
        self.tableWidget_4.setItem(j, i, item)

    # sell list
    for j in range(len(sell_list)):
        row_data = sell_list[j]
        split_row_data = row_data.split(';')
        split_row_data[1] = self.kiwoom.get_master_code_name(split_row_data[1].rstrip())

        for i in range(len(split_row_data)):
            item = QTableWidgetItem(split_row_data[i].rstrip())
            item.setTextAlignment(Qt.AlignVCenter | Qt.AlignCenter)
            self.tableWidget_4.setItem(len(buy_list) + j, i, item)
            self.tableWidget_4.resizeRowsToContents()

    def load_buy_sell_list(self):
        f = open("buy_list.txt", 'rt')
        buy_list = f.readlines()
        f.close()

        f = open("sell_list.txt", 'rt')
        sell_list = f.readlines()
        f.close()

        row_count = len(buy_list) + len(sell_list)
        self.tableWidget_4.setRowCount(row_count)

        # buy list
        for j in range(len(buy_list)):
            row_data = buy_list[j]
            split_row_data = row_data.split(';')
            split_row_data[1] = self.kiwoom.get_master_code_name(split_row_data[1].rsplit())

            for i in range(len(split_row_data)):
                item = QTableWidgetItem(split_row_data[i].rstrip())
                item.setTextAlignment(Qt.AlignVCenter | Qt.AlignCenter)
                self.tableWidget_4.setItem(j, i, item)

        # sell list
        for j in range(len(sell_list)):
            row_data = sell_list[j]
            split_row_data = row_data.split(';')
            split_row_data[1] = self.kiwoom.get_master_code_name(split_row_data[1].rstrip())

            for i in range(len(split_row_data)):
                item = QTableWidgetItem(split_row_data[i].rstrip())
                item.setTextAlignment(Qt.AlignVCenter | Qt.AlignCenter)
                self.tableWidget_4.setItem(len(buy_list) + j, i, item)

        self.tableWidget_4.resizeRowsToContents()
